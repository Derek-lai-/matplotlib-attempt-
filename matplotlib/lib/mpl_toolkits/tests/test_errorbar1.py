from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
from nose.tools import raises
from matplotlib import cbook
iterable = cbook.iterable
import functools
import operator

# setup the axis
# make a "singleton" axis
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

def assert_errors_equal(x, y, z, xerr, yerr, zerr, err, step=1):
    '''
    Assert that the error bars returned by the error bar function is
    equal to the values they should be

    Constructs lists to match the output generated by errorbar
    '''
    if not iterable(x):
        x = [x]

    if not iterable(y):
        y = [y]

    if not iterable(z):
        z = [z]
    i_array = 0
    idx = 0
    if xerr is not None:

        if not iterable(xerr):
            xerr = [xerr] * len(x)

        xlines = err[2][idx]._segments3d
        for i, line in enumerate(xlines):
            # 2xN
            if len(xerr) == 2 and iterable(xerr[0]) and iterable(xerr[1]):
                l = xerr[0][i]
                r = xerr[1][i]
            else:
                l = r = xerr[i]
            assert(
                np.allclose(line[0], [x[i_array] - l, y[i_array], z[i_array]]))
            assert(
                np.allclose(line[1], [x[i_array] + r, y[i_array], z[i_array]]))
            i_array = i_array + step
        idx = idx + 1

    i_array = 0
    if yerr is not None:

        if not iterable(yerr):
            yerr = [yerr] * len(y)

        ylines = err[2][idx]._segments3d
        for i, line in enumerate(ylines):
            # 2xN would produce
            if len(yerr) == 2 and iterable(yerr[0]) and iterable(yerr[1]):
                l = yerr[0][i]
                r = yerr[1][i]
            else:
                l = r = yerr[i]
            assert(
                np.allclose(line[0], [x[i_array], y[i_array] - l, z[i_array]]))
            assert(
                np.allclose(line[1], [x[i_array], y[i_array] + r, z[i_array]]))
            i_array = i_array + step
        idx = idx + 1

    i_array = 0
    if zerr is not None:

        if not iterable(zerr):
            zerr = [zerr] * len(z)

        zlines = err[2][idx]._segments3d
        for i, line in enumerate(zlines):
            if len(zerr) == 2 and iterable(zerr[0]) and iterable(zerr[1]):
                l = zerr[0][i]
                r = zerr[1][i]
            else:
                l = r = zerr[i]
            assert(
                np.allclose(line[0], [x[i_array], y[i_array], z[i_array] - l]))
            assert(
                np.allclose(line[1], [x[i_array], y[i_array], z[i_array] + r]))
            i_array = i_array + step
        idx = idx + 1


@raises(ValueError)
def test_errorbar1_errorevery1():
    """Errorevery = -2 """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    zerr = 1
    xerr = 1
    yerr = 1
    errorevery = -2

    err = ax.errorbar(xs, ys, zs, xerr=xerr, zerr=zerr, errorevery=errorevery)

    
def test_errorbar1_errorevery2():
    """Errorevery = 2 """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    zerr = 1
    xerr = 1
    yerr = 1
    errorevery = 2
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err,2) 
    
def test_errorbar1_iterable_false():
    """iterable(x) iterable(y) iterable(z) false"""
    xs = 1
    ys = 1
    zs = 1
    zerr = 1
    xerr = 1
    yerr = 1
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)  
    
def test_errorbar1_iterable_true():
    """iterable(X) iterable(Y) iterable(Z) true"""
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    zerr = 1
    xerr = 1
    yerr = 1
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)     
    
def test_errorbar1_xerr_none():
    """xerr none"""
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = None
    zerr = 1
    yerr = 1
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)   

def test_errorbar1_xerr_iterable():
    """xerr iterable """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = [1,2,3,4,5]
    zerr = 1
    yerr = 1
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)

def test_errorbar1_xerr_iterable_len1():
    """xerr iterable 
        T T T = F
        len = 2          
        iterable xerr[0]
        iterable xerr[1]
    """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = [[1,2,3,4,5],[4,5,6,7,8]]
    zerr = 1
    yerr = 1
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)   

def test_errorbar1_xerr_iterable_len2():
    """xerr iterable 
        F F F = T
        len = 2          
        iterable xerr[0]
        iterable xerr[1]
    """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = [1,2,3,4,5]
    zerr = 1
    yerr = 1
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)  
    
def test_errorbar1_yerr_none():
    """yerr none"""
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    yerr = None
    zerr = 1
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err) 

def test_errorbar1_yerr_iterable_len1():
    """yerr iterable 
        T T T = F
        len = 2          
        iterable yerr[0]
        iterable yerr[1]
    """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    zerr = 1
    yerr = [[1,2,3,4,5],[4,5,6,7,8]]
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)   

def test_errorbar1_yerr_iterable_len2():
    """yerr iterable 
        F T F = T
        len = 2          
        iterable yerr[0]
        iterable yerr[1]
    """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    zerr = 1
    yerr = [[1,2,3,4,],2,3,4]
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)  

def test_errorbar1_yerr_iterable_len3():
    """yerr iterable 
        F F F = T
        len = 2          
        iterable yerr[0]
        iterable yerr[1]
    """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    zerr = 1
    yerr = [1,2,3,4,5]
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)  
    
def test_errorbar1_zerr_none():
    """zerr none"""
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    yerr = 1
    zerr = None
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err) 

def test_errorbar1_zerr_iterable_len1():
    """zerr iterable 
        T T T = F
        len = 2          
        iterable zerr[0]
        iterable zerr[1]
    """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    yerr = 1
    zerr = [[1,2,3,4,5],[4,5,6,7,8]]
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)   

def test_errorbar1_yerr_iterable_len2():
    """zerr iterable 
        F F F = T
        len = 2          
        iterable zerr[0]
        iterable zerr[1]
    """
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    yerr = 1
    zerr = [1,2,3,4,5]
    errorevery = 1
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err)  

def test_errorbar1_barsabove_true():
    """barsabove = true, fmt = none"""
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    yerr = 1
    zerr = 1
    errorevery = 1
    barsabove = True
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery, barsabove=barsabove)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err) 

def test_errorbar1_fmt_notnone():
    """barsabove = flase, fmt = 'o'"""
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    yerr = 1
    zerr = 1
    errorevery = 1
    fmt='o'
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery, fmt=fmt)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err) 

def test_errorbar1_fmt_notnone():
    """barsabove = True, fmt = 'o'"""
    xs = np.arange(5)
    ys = np.arange(5)
    zs = np.arange(5)
    xerr = 1
    yerr = 1
    zerr = 1
    errorevery = 1
    barsabove = True
    fmt='o'
   
    err = ax.errorbar(xs, ys, zs, xerr=xerr, yerr=yerr, zerr=zerr, errorevery=errorevery, barsabove=barsabove, fmt=fmt)
    assert_errors_equal(xs,ys,zs,xerr,yerr,zerr,err) 

if __name__ == '__main__':
    import nose

